version: '3.9'
networks:
  data:
    external:
      name: waisy

services:
  # kafka
#  zookeeper:
#    container_name: zookeeper
#    hostname: zookeeper
#    image: zookeeper:3.6.2
#    ports:
#      - "2181:2181"
#    networks:
#      - data
#    environment:
#      ZOO_MY_ID: 1
#      ZOO_PORT: 2181
#    volumes:
#      - ./zookeeper/data:/data
#      - ./zookeeper/datalog:/datalog
#    restart: always
#
#  kafka:
#    container_name: kafka
#    hostname: kafka
#    image: wurstmeister/kafka:2.13-2.7.0
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock
#      - ./db/kafka:/var/lib/kafka/data
##      - ./kafka/config:/opt/kafka/config
#    ports:
#      - "9092:9092"
#      - "29092:29092"
#    networks:
#      - data
#    environment:
#      KAFKA_LISTENERS: INTERNAL://localhost:9092,EXTERNAL://kafka:29092
#      KAFKA_ADVERTISED_LISTENERS: INTERNAL://localhost:9092,EXTERNAL://kafka:29092
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
#      KAFKA_INTER_BROKER_LISTENER_NAME: EXTERNAL
##      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092
##      KAFKA_LISTENERS: PLAINTEXT://kafka:29092
#      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
##      KAFKA_ADVERTISED_HOST_NAME: kafka
##      KAFKA_ADVERTISED_PORT: 9092
#      KAFKA_CREATE_TOPICS: "bestseller:1:1"
#      # topic:partition:replica
#      # compact = cleanup.policy set to compact
#    depends_on:
#      - zookeeper

  # kafka producer
#  kafka_cont:
#    container_name: kafka_controller
#    image: ubuntu:18.04
#    env_file: ./kafka_cont/env
#    volumes:
#      - ./kafka_cont:/home/ubuntu
#      - /var/run/docker.sock:/var/run/docker.sock
#    networks:
#      - data_platform
#    depends_on:
#      - kafka

#  mysql_8:
#    container_name: mysql_8
#    image: mysql:8.0
#    privileged: true
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock
#      - ./db/mysql8:/var/lib/mysql
#    ports:
#      - 3306:3306
#    networks:
#      - data
#    command:
#      - --character-set-server=utf8mb4
#      - --collation-server=utf8mb4_unicode_ci
#      - --default-authentication-plugin=mysql_native_password
#      - --skip-grant-tables
#    environment:
#      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
#      MYSQL_ROOT_PASSWORD: donghyun
#      MYSQL_DATABASE: waisy
#      MYSQL_USER: waisy
#      MYSQL_PASSWORD: donghyun
#    restart: always

  mysql_5:
    container_name: mysql_5
    hostname: mysql_5
    image: mysql:5.7
    privileged: true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./db/mysql5:/var/lib/mysql
    ports:
      - "3306:3306"
    networks:
      - data
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
      - --default-authentication-plugin=mysql_native_password
      - --skip-grant-tables
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
      MYSQL_ROOT_PASSWORD: donghyun
      MYSQL_DATABASE: waisy
      MYSQL_USER: waisy
      MYSQL_PASSWORD: donghyun
    restart: always

  postgres_12:
    container_name: postgres_12
    hostname: postgres_12
    image: postgres:12.6-alpine
    ports:
      - "5432:5432"
    networks:
      - data
    volumes:
      - ./db/postgres_12:/var/lib/postgresql/data
    restart: always
    environment:
      POSTGRES_PASSWORD: "donghyun"

  es:
    container_name: elasticsearch
    hostname: elasticsearch
    image: elasticsearch:7.9.2
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - data
    volumes:
      - ./db/es:/usr/share/elasticsearch/data
    environment:
      - discovery.type=single-node

#  logstash:
#    container_name: logstash
#    build: ./logstash
##    image: logstash:7.9.3
#    networks:
#      - data
#    volumes:
#      - ./logstash/pipeline:/usr/share/logstash/pipeline
#      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
#    depends_on:
#      - kafka
#
#  kibana:
#    container_name: kibana
#    image: kibana:7.3.2
#    ports:
#      - "5601:5601"
#    networks:
#      - data

  redis:
    container_name: redis
    hostname: redis
    image: redis:5.0-alpine
    ports:
      - "6379:6379"
    networks:
      - data
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 1G
    restart: always